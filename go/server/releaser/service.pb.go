// Code generated by protoc-gen-gogo.
// source: service.proto
// DO NOT EDIT!

/*
Package releaser is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ChannelReleases
	Release
	Channel
	ChannelReleaseRequest
	ReleaseRequest
*/
package releaser

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ChannelReleases struct {
	Channel  *Channel   `protobuf:"bytes,1,opt,name=Channel,json=channel" json:"Channel,omitempty"`
	Releases []*Release `protobuf:"bytes,2,rep,name=Releases,json=releases" json:"Releases,omitempty"`
}

func (m *ChannelReleases) Reset()                    { *m = ChannelReleases{} }
func (m *ChannelReleases) String() string            { return proto.CompactTextString(m) }
func (*ChannelReleases) ProtoMessage()               {}
func (*ChannelReleases) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *ChannelReleases) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelReleases) GetReleases() []*Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

type Release struct {
	ID  string `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	SHA string `protobuf:"bytes,2,opt,name=SHA,json=sHA,proto3" json:"SHA,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

type Channel struct {
	ChannelID   string `protobuf:"bytes,1,opt,name=ChannelID,json=channelID,proto3" json:"ChannelID,omitempty"`
	ChannelName string `protobuf:"bytes,2,opt,name=ChannelName,json=channelName,proto3" json:"ChannelName,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

type ChannelReleaseRequest struct {
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,json=channelID,proto3" json:"ChannelID,omitempty"`
}

func (m *ChannelReleaseRequest) Reset()                    { *m = ChannelReleaseRequest{} }
func (m *ChannelReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*ChannelReleaseRequest) ProtoMessage()               {}
func (*ChannelReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

type ReleaseRequest struct {
	ReleaseID string `protobuf:"bytes,1,opt,name=ReleaseID,json=releaseID,proto3" json:"ReleaseID,omitempty"`
}

func (m *ReleaseRequest) Reset()                    { *m = ReleaseRequest{} }
func (m *ReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseRequest) ProtoMessage()               {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func init() {
	proto.RegisterType((*ChannelReleases)(nil), "releaser.ChannelReleases")
	proto.RegisterType((*Release)(nil), "releaser.Release")
	proto.RegisterType((*Channel)(nil), "releaser.Channel")
	proto.RegisterType((*ChannelReleaseRequest)(nil), "releaser.ChannelReleaseRequest")
	proto.RegisterType((*ReleaseRequest)(nil), "releaser.ReleaseRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Releases service

type ReleasesClient interface {
	GetChannelReleases(ctx context.Context, in *ChannelReleaseRequest, opts ...grpc.CallOption) (*ChannelReleases, error)
	GetRelease(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*Release, error)
}

type releasesClient struct {
	cc *grpc.ClientConn
}

func NewReleasesClient(cc *grpc.ClientConn) ReleasesClient {
	return &releasesClient{cc}
}

func (c *releasesClient) GetChannelReleases(ctx context.Context, in *ChannelReleaseRequest, opts ...grpc.CallOption) (*ChannelReleases, error) {
	out := new(ChannelReleases)
	err := grpc.Invoke(ctx, "/releaser.Releases/GetChannelReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releasesClient) GetRelease(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := grpc.Invoke(ctx, "/releaser.Releases/GetRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Releases service

type ReleasesServer interface {
	GetChannelReleases(context.Context, *ChannelReleaseRequest) (*ChannelReleases, error)
	GetRelease(context.Context, *ReleaseRequest) (*Release, error)
}

func RegisterReleasesServer(s *grpc.Server, srv ReleasesServer) {
	s.RegisterService(&_Releases_serviceDesc, srv)
}

func _Releases_GetChannelReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleasesServer).GetChannelReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/releaser.Releases/GetChannelReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleasesServer).GetChannelReleases(ctx, req.(*ChannelReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Releases_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleasesServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/releaser.Releases/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleasesServer).GetRelease(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Releases_serviceDesc = grpc.ServiceDesc{
	ServiceName: "releaser.Releases",
	HandlerType: (*ReleasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelReleases",
			Handler:    _Releases_GetChannelReleases_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _Releases_GetRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorService,
}

var fileDescriptorService = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4a, 0xcd, 0x49, 0x4d,
	0x04, 0x8a, 0x29, 0xe5, 0x72, 0xf1, 0x3b, 0x67, 0x24, 0xe6, 0xe5, 0xa5, 0xe6, 0x04, 0x41, 0x84,
	0x8a, 0x85, 0xb4, 0xb9, 0xd8, 0xa1, 0x42, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x82, 0x7a,
	0x30, 0xe5, 0x7a, 0x30, 0xb5, 0xec, 0xc9, 0x10, 0x86, 0x90, 0x2e, 0x17, 0x07, 0x4c, 0xa3, 0x04,
	0x93, 0x02, 0x33, 0xaa, 0x6a, 0xa8, 0x4c, 0x10, 0xcc, 0xba, 0x62, 0x25, 0xa0, 0xd9, 0x50, 0x41,
	0x21, 0x3e, 0x2e, 0x26, 0x4f, 0x17, 0xb0, 0x0d, 0x9c, 0x41, 0x4c, 0x99, 0x2e, 0x42, 0x02, 0x5c,
	0xcc, 0xc1, 0x1e, 0x8e, 0x40, 0x43, 0x40, 0x02, 0xcc, 0xc5, 0x1e, 0x8e, 0x4a, 0x9e, 0x70, 0x87,
	0x08, 0xc9, 0x70, 0x71, 0x42, 0x99, 0x70, 0x3d, 0x9c, 0xc9, 0x30, 0x01, 0x21, 0x05, 0x2e, 0x6e,
	0xa8, 0xac, 0x5f, 0x62, 0x6e, 0x2a, 0xd4, 0x08, 0xee, 0x64, 0x84, 0x90, 0x92, 0x29, 0x97, 0x28,
	0xaa, 0x37, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xf0, 0x1b, 0xac, 0xa4, 0xc7, 0xc5, 0x87,
	0xa9, 0x1e, 0x2a, 0x82, 0x50, 0x5f, 0x04, 0x13, 0x30, 0x9a, 0xcd, 0x88, 0x08, 0x0e, 0xa1, 0x20,
	0x2e, 0x21, 0xf7, 0xd4, 0x12, 0xf4, 0xd0, 0x95, 0xc7, 0x0c, 0x4c, 0x14, 0x1b, 0xa4, 0x24, 0x71,
	0x29, 0x28, 0x56, 0x62, 0x10, 0xb2, 0xe6, 0xe2, 0x02, 0x9a, 0x09, 0x0b, 0x42, 0x09, 0xcc, 0xa0,
	0x86, 0x1a, 0x82, 0x19, 0x09, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0xc8, 0x37, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xf1, 0xd8, 0x77, 0xed, 0x0d, 0x02, 0x00, 0x00,
}
